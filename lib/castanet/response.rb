
# line 1 "lib/castanet/response.rl"
require 'castanet'


# line 85 "lib/castanet/response.rl"


module Castanet
  class Response
    ##
    # Whether or not this response passed CAS authentication.
    #
    # @return [Boolean]
    attr_accessor :authenticated

    alias_method :authenticated?, :authenticated

    ##
    # The failure code returned on authentication failure.
    #
    # @return [String, nil]
    attr_accessor :failure_code

    ##
    # The reason given by the CAS server for authentication failure.
    #
    # @return [String, nil]
    attr_accessor :failure_reason

    ##
    # The PGT IOU returned by an authentication success message.
    #
    # @return [String, nil]
    attr_accessor :pgt_iou

    ##
    # The name of the owner of the validated service or proxy ticket.
    #
    # This information is only present on authentication success.
    #
    # @return [String, nil]
    attr_accessor :username

    ##
    # Generates a {Response} object from a CAS response.
    #
    # @param [String] response the CAS response
    # @return [Response]
    def self.from_cas(response)
      data = response.strip.unpack('c*')
      buffer = ''
      eof = nil

      
# line 57 "lib/castanet/response.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = parser_start
end

# line 134 "lib/castanet/response.rl"

      new.tap do |r|
        
# line 68 "lib/castanet/response.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _parser_key_offsets[cs]
	_trans = _parser_index_offsets[cs]
	_klen = _parser_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _parser_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _parser_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _parser_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _parser_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _parser_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	cs = _parser_trans_targs[_trans]
	if _parser_trans_actions[_trans] != 0
		_acts = _parser_trans_actions[_trans]
		_nacts = _parser_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _parser_actions[_acts - 1]
when 0 then
# line 9 "lib/castanet/response.rl"
		begin
 buffer << data[p] 		end
when 1 then
# line 10 "lib/castanet/response.rl"
		begin
 r.username = buffer; buffer = '' 		end
when 2 then
# line 11 "lib/castanet/response.rl"
		begin
 r.failure_code = buffer; buffer = '' 		end
when 3 then
# line 12 "lib/castanet/response.rl"
		begin
 r.failure_reason = buffer.strip; buffer = '' 		end
when 4 then
# line 13 "lib/castanet/response.rl"
		begin
 r.pgt_iou = buffer; buffer = '' 		end
when 5 then
# line 14 "lib/castanet/response.rl"
		begin
 r.authenticated = true; eof = -1 		end
# line 172 "lib/castanet/response.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 137 "lib/castanet/response.rl"
      end
    end

    def initialize
      self.authenticated = false
    end

    
# line 208 "lib/castanet/response.rb"
class << self
	attr_accessor :_parser_actions
	private :_parser_actions, :_parser_actions=
end
self._parser_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5
]

class << self
	attr_accessor :_parser_key_offsets
	private :_parser_key_offsets, :_parser_key_offsets=
end
self._parser_key_offsets = [
	0, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	31, 33, 34, 35, 36, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	56, 57, 58, 59, 61, 62, 66, 67, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 96, 97, 98, 100, 103, 
	108, 109, 111, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 172, 176, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 187, 189, 
	190, 191, 192, 193, 194, 195, 196, 197, 
	198, 199, 203, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 276, 
	277, 278, 279, 287, 295, 303, 311, 319, 
	327, 335, 343, 351, 359, 367, 375, 383, 
	391, 399, 407, 415, 423, 431, 439, 447, 
	455, 463, 471, 479, 487, 495, 503, 511, 
	519, 527, 535, 543, 551, 559, 567, 575, 
	583, 591, 599, 607, 615, 623, 631, 639, 
	647, 655, 663, 671, 679, 687, 695, 703, 
	711, 719, 727, 735, 743, 751, 759, 767, 
	775, 783, 791, 799, 807, 815, 823, 831, 
	839, 847, 855, 863, 871, 879, 887, 895, 
	903, 911, 919, 927, 935, 943, 951, 959, 
	967, 975, 983, 991, 999, 1007, 1015, 1023, 
	1031, 1039, 1047, 1055, 1063, 1071, 1079, 1087, 
	1095, 1103, 1111, 1119, 1127, 1135, 1143, 1151, 
	1159, 1167, 1175, 1183, 1191, 1199, 1207, 1215, 
	1223, 1231, 1239, 1247, 1255, 1263, 1271, 1279, 
	1287, 1295, 1303, 1311, 1319, 1327, 1335, 1343, 
	1351, 1359, 1367, 1375, 1383, 1391, 1399, 1407, 
	1415, 1423, 1431, 1439, 1447, 1455, 1463, 1471, 
	1479, 1487, 1495, 1503, 1511, 1519, 1527, 1535, 
	1543, 1551, 1559, 1567, 1575, 1583, 1591, 1599, 
	1607, 1615, 1623, 1631, 1639, 1647, 1655, 1663, 
	1671, 1679, 1687, 1695, 1703, 1711, 1719, 1727, 
	1735, 1743, 1751, 1759, 1767, 1775, 1783, 1791, 
	1799, 1807, 1815, 1823, 1831, 1839, 1847, 1855, 
	1863, 1871, 1879, 1887, 1895, 1903, 1911, 1919, 
	1927, 1935, 1943, 1951, 1959, 1967, 1975, 1983, 
	1991, 1999, 2007, 2015, 2023, 2031, 2039, 2047, 
	2055, 2063, 2071, 2079, 2087, 2095, 2103, 2111, 
	2119, 2127, 2135, 2143, 2151, 2159, 2167, 2175, 
	2183, 2191, 2199, 2207, 2215, 2223, 2231, 2239, 
	2247, 2255, 2263, 2271, 2279, 2287, 2295, 2303, 
	2311, 2319, 2327, 2328, 2329, 2330, 2331, 2332, 
	2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 
	2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 
	2349, 2350, 2351, 2352, 2353, 2357, 2358
]

class << self
	attr_accessor :_parser_trans_keys
	private :_parser_trans_keys, :_parser_trans_keys=
end
self._parser_trans_keys = [
	60, 99, 97, 115, 58, 115, 101, 114, 
	118, 105, 99, 101, 82, 101, 115, 112, 
	111, 110, 115, 101, 32, 120, 109, 108, 
	110, 115, 58, 99, 97, 115, 61, 34, 
	39, 104, 116, 116, 112, 58, 47, 47, 
	119, 119, 119, 46, 121, 97, 108, 101, 
	46, 101, 100, 117, 47, 116, 112, 47, 
	99, 97, 115, 34, 39, 62, 32, 60, 
	9, 13, 99, 97, 115, 58, 97, 117, 
	116, 104, 101, 110, 116, 105, 99, 97, 
	116, 105, 111, 110, 70, 83, 97, 105, 
	108, 117, 114, 101, 32, 99, 111, 100, 
	101, 61, 34, 39, 95, 65, 90, 34, 
	39, 95, 65, 90, 62, 38, 60, 38, 
	60, 47, 99, 97, 115, 58, 97, 117, 
	116, 104, 101, 110, 116, 105, 99, 97, 
	116, 105, 111, 110, 70, 97, 105, 108, 
	117, 114, 101, 62, 32, 60, 9, 13, 
	47, 99, 97, 115, 58, 115, 101, 114, 
	118, 105, 99, 101, 82, 101, 115, 112, 
	111, 110, 115, 101, 62, 117, 99, 99, 
	101, 115, 115, 62, 32, 60, 9, 13, 
	99, 97, 115, 58, 117, 115, 101, 114, 
	62, 38, 60, 38, 60, 47, 99, 97, 
	115, 58, 117, 115, 101, 114, 62, 32, 
	60, 9, 13, 47, 99, 99, 97, 115, 
	58, 97, 117, 116, 104, 101, 110, 116, 
	105, 99, 97, 116, 105, 111, 110, 83, 
	117, 99, 99, 101, 115, 115, 62, 32, 
	60, 9, 13, 47, 99, 97, 115, 58, 
	115, 101, 114, 118, 105, 99, 101, 82, 
	101, 115, 112, 111, 110, 115, 101, 62, 
	97, 115, 58, 112, 114, 111, 120, 121, 
	71, 114, 97, 110, 116, 105, 110, 103, 
	84, 105, 99, 107, 101, 116, 62, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 45, 
	60, 48, 57, 65, 90, 97, 122, 60, 
	47, 99, 97, 115, 58, 112, 114, 111, 
	120, 121, 71, 114, 97, 110, 116, 105, 
	110, 103, 84, 105, 99, 107, 101, 116, 
	62, 32, 60, 9, 13, 47, 0
]

class << self
	attr_accessor :_parser_single_lengths
	private :_parser_single_lengths, :_parser_single_lengths=
end
self._parser_single_lengths = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 3, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 0
]

class << self
	attr_accessor :_parser_range_lengths
	private :_parser_range_lengths, :_parser_range_lengths=
end
self._parser_range_lengths = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0
]

class << self
	attr_accessor :_parser_index_offsets
	private :_parser_index_offsets, :_parser_index_offsets=
end
self._parser_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 48, 50, 52, 54, 56, 58, 60, 
	62, 65, 67, 69, 71, 73, 75, 77, 
	79, 81, 83, 85, 87, 89, 91, 93, 
	95, 97, 99, 101, 103, 105, 107, 109, 
	111, 113, 115, 117, 120, 122, 126, 128, 
	130, 132, 134, 136, 138, 140, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 192, 195, 
	200, 202, 205, 208, 210, 212, 214, 216, 
	218, 220, 222, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 262, 266, 
	268, 270, 272, 274, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	316, 318, 320, 322, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 344, 347, 350, 
	352, 354, 356, 358, 360, 362, 364, 366, 
	368, 370, 374, 377, 379, 381, 383, 385, 
	387, 389, 391, 393, 395, 397, 399, 401, 
	403, 405, 407, 409, 411, 413, 415, 417, 
	419, 421, 423, 425, 427, 429, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 499, 
	501, 503, 505, 507, 509, 511, 513, 515, 
	517, 519, 521, 527, 533, 539, 545, 551, 
	557, 563, 569, 575, 581, 587, 593, 599, 
	605, 611, 617, 623, 629, 635, 641, 647, 
	653, 659, 665, 671, 677, 683, 689, 695, 
	701, 707, 713, 719, 725, 731, 737, 743, 
	749, 755, 761, 767, 773, 779, 785, 791, 
	797, 803, 809, 815, 821, 827, 833, 839, 
	845, 851, 857, 863, 869, 875, 881, 887, 
	893, 899, 905, 911, 917, 923, 929, 935, 
	941, 947, 953, 959, 965, 971, 977, 983, 
	989, 995, 1001, 1007, 1013, 1019, 1025, 1031, 
	1037, 1043, 1049, 1055, 1061, 1067, 1073, 1079, 
	1085, 1091, 1097, 1103, 1109, 1115, 1121, 1127, 
	1133, 1139, 1145, 1151, 1157, 1163, 1169, 1175, 
	1181, 1187, 1193, 1199, 1205, 1211, 1217, 1223, 
	1229, 1235, 1241, 1247, 1253, 1259, 1265, 1271, 
	1277, 1283, 1289, 1295, 1301, 1307, 1313, 1319, 
	1325, 1331, 1337, 1343, 1349, 1355, 1361, 1367, 
	1373, 1379, 1385, 1391, 1397, 1403, 1409, 1415, 
	1421, 1427, 1433, 1439, 1445, 1451, 1457, 1463, 
	1469, 1475, 1481, 1487, 1493, 1499, 1505, 1511, 
	1517, 1523, 1529, 1535, 1541, 1547, 1553, 1559, 
	1565, 1571, 1577, 1583, 1589, 1595, 1601, 1607, 
	1613, 1619, 1625, 1631, 1637, 1643, 1649, 1655, 
	1661, 1667, 1673, 1679, 1685, 1691, 1697, 1703, 
	1709, 1715, 1721, 1727, 1733, 1739, 1745, 1751, 
	1757, 1763, 1769, 1775, 1781, 1787, 1793, 1799, 
	1805, 1811, 1817, 1823, 1829, 1835, 1841, 1847, 
	1853, 1859, 1865, 1871, 1877, 1883, 1889, 1895, 
	1901, 1907, 1913, 1919, 1925, 1931, 1937, 1943, 
	1949, 1955, 1961, 1967, 1973, 1979, 1985, 1991, 
	1997, 2003, 2009, 2015, 2021, 2027, 2033, 2039, 
	2045, 2051, 2057, 2059, 2061, 2063, 2065, 2067, 
	2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 
	2085, 2087, 2089, 2091, 2093, 2095, 2097, 2099, 
	2101, 2103, 2105, 2107, 2109, 2113, 2115
]

class << self
	attr_accessor :_parser_trans_targs
	private :_parser_trans_targs, :_parser_trans_targs=
end
self._parser_trans_targs = [
	2, 0, 3, 0, 4, 0, 5, 0, 
	6, 0, 7, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 0, 
	18, 0, 19, 0, 20, 0, 21, 0, 
	22, 0, 23, 0, 24, 0, 25, 0, 
	26, 0, 27, 0, 28, 0, 29, 0, 
	30, 0, 31, 0, 32, 0, 33, 33, 
	0, 34, 0, 35, 0, 36, 0, 37, 
	0, 38, 0, 39, 0, 40, 0, 41, 
	0, 42, 0, 43, 0, 44, 0, 45, 
	0, 46, 0, 47, 0, 48, 0, 49, 
	0, 50, 0, 51, 0, 52, 0, 53, 
	0, 54, 0, 55, 0, 56, 0, 57, 
	0, 58, 0, 59, 0, 60, 60, 0, 
	61, 0, 61, 62, 61, 0, 63, 0, 
	64, 0, 65, 0, 66, 0, 67, 0, 
	68, 0, 69, 0, 70, 0, 71, 0, 
	72, 0, 73, 0, 74, 0, 75, 0, 
	76, 0, 77, 0, 78, 0, 79, 0, 
	80, 0, 81, 148, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 89, 0, 90, 0, 91, 
	0, 92, 0, 93, 0, 94, 94, 0, 
	95, 95, 0, 96, 96, 95, 95, 0, 
	97, 0, 0, 0, 98, 0, 99, 98, 
	100, 0, 101, 0, 102, 0, 103, 0, 
	104, 0, 105, 0, 106, 0, 107, 0, 
	108, 0, 109, 0, 110, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 118, 0, 119, 0, 
	120, 0, 121, 0, 122, 0, 123, 0, 
	124, 0, 125, 0, 126, 0, 126, 127, 
	126, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 138, 0, 
	139, 0, 140, 0, 141, 0, 142, 0, 
	143, 0, 144, 0, 145, 0, 146, 0, 
	147, 0, 534, 0, 149, 0, 150, 0, 
	151, 0, 152, 0, 153, 0, 154, 0, 
	155, 0, 155, 156, 155, 0, 157, 0, 
	158, 0, 159, 0, 160, 0, 161, 0, 
	162, 0, 163, 0, 164, 0, 165, 0, 
	0, 0, 166, 0, 167, 166, 168, 0, 
	169, 0, 170, 0, 171, 0, 172, 0, 
	173, 0, 174, 0, 175, 0, 176, 0, 
	177, 0, 177, 178, 177, 0, 179, 227, 
	0, 180, 0, 181, 0, 182, 0, 183, 
	0, 184, 0, 185, 0, 186, 0, 187, 
	0, 188, 0, 189, 0, 190, 0, 191, 
	0, 192, 0, 193, 0, 194, 0, 195, 
	0, 196, 0, 197, 0, 198, 0, 199, 
	0, 200, 0, 201, 0, 202, 0, 203, 
	0, 204, 0, 205, 0, 205, 206, 205, 
	0, 207, 0, 208, 0, 209, 0, 210, 
	0, 211, 0, 212, 0, 213, 0, 214, 
	0, 215, 0, 216, 0, 217, 0, 218, 
	0, 219, 0, 220, 0, 221, 0, 222, 
	0, 223, 0, 224, 0, 225, 0, 226, 
	0, 534, 0, 228, 0, 229, 0, 230, 
	0, 231, 0, 232, 0, 233, 0, 234, 
	0, 235, 0, 236, 0, 237, 0, 238, 
	0, 239, 0, 240, 0, 241, 0, 242, 
	0, 243, 0, 244, 0, 245, 0, 246, 
	0, 247, 0, 248, 0, 249, 0, 250, 
	0, 251, 507, 251, 251, 251, 0, 252, 
	507, 252, 252, 252, 0, 253, 507, 253, 
	253, 253, 0, 254, 507, 254, 254, 254, 
	0, 255, 507, 255, 255, 255, 0, 256, 
	507, 256, 256, 256, 0, 257, 507, 257, 
	257, 257, 0, 258, 507, 258, 258, 258, 
	0, 259, 507, 259, 259, 259, 0, 260, 
	507, 260, 260, 260, 0, 261, 507, 261, 
	261, 261, 0, 262, 507, 262, 262, 262, 
	0, 263, 507, 263, 263, 263, 0, 264, 
	507, 264, 264, 264, 0, 265, 507, 265, 
	265, 265, 0, 266, 507, 266, 266, 266, 
	0, 267, 507, 267, 267, 267, 0, 268, 
	507, 268, 268, 268, 0, 269, 507, 269, 
	269, 269, 0, 270, 507, 270, 270, 270, 
	0, 271, 507, 271, 271, 271, 0, 272, 
	507, 272, 272, 272, 0, 273, 507, 273, 
	273, 273, 0, 274, 507, 274, 274, 274, 
	0, 275, 507, 275, 275, 275, 0, 276, 
	507, 276, 276, 276, 0, 277, 507, 277, 
	277, 277, 0, 278, 507, 278, 278, 278, 
	0, 279, 507, 279, 279, 279, 0, 280, 
	507, 280, 280, 280, 0, 281, 507, 281, 
	281, 281, 0, 282, 507, 282, 282, 282, 
	0, 283, 507, 283, 283, 283, 0, 284, 
	507, 284, 284, 284, 0, 285, 507, 285, 
	285, 285, 0, 286, 507, 286, 286, 286, 
	0, 287, 507, 287, 287, 287, 0, 288, 
	507, 288, 288, 288, 0, 289, 507, 289, 
	289, 289, 0, 290, 507, 290, 290, 290, 
	0, 291, 507, 291, 291, 291, 0, 292, 
	507, 292, 292, 292, 0, 293, 507, 293, 
	293, 293, 0, 294, 507, 294, 294, 294, 
	0, 295, 507, 295, 295, 295, 0, 296, 
	507, 296, 296, 296, 0, 297, 507, 297, 
	297, 297, 0, 298, 507, 298, 298, 298, 
	0, 299, 507, 299, 299, 299, 0, 300, 
	507, 300, 300, 300, 0, 301, 507, 301, 
	301, 301, 0, 302, 507, 302, 302, 302, 
	0, 303, 507, 303, 303, 303, 0, 304, 
	507, 304, 304, 304, 0, 305, 507, 305, 
	305, 305, 0, 306, 507, 306, 306, 306, 
	0, 307, 507, 307, 307, 307, 0, 308, 
	507, 308, 308, 308, 0, 309, 507, 309, 
	309, 309, 0, 310, 507, 310, 310, 310, 
	0, 311, 507, 311, 311, 311, 0, 312, 
	507, 312, 312, 312, 0, 313, 507, 313, 
	313, 313, 0, 314, 507, 314, 314, 314, 
	0, 315, 507, 315, 315, 315, 0, 316, 
	507, 316, 316, 316, 0, 317, 507, 317, 
	317, 317, 0, 318, 507, 318, 318, 318, 
	0, 319, 507, 319, 319, 319, 0, 320, 
	507, 320, 320, 320, 0, 321, 507, 321, 
	321, 321, 0, 322, 507, 322, 322, 322, 
	0, 323, 507, 323, 323, 323, 0, 324, 
	507, 324, 324, 324, 0, 325, 507, 325, 
	325, 325, 0, 326, 507, 326, 326, 326, 
	0, 327, 507, 327, 327, 327, 0, 328, 
	507, 328, 328, 328, 0, 329, 507, 329, 
	329, 329, 0, 330, 507, 330, 330, 330, 
	0, 331, 507, 331, 331, 331, 0, 332, 
	507, 332, 332, 332, 0, 333, 507, 333, 
	333, 333, 0, 334, 507, 334, 334, 334, 
	0, 335, 507, 335, 335, 335, 0, 336, 
	507, 336, 336, 336, 0, 337, 507, 337, 
	337, 337, 0, 338, 507, 338, 338, 338, 
	0, 339, 507, 339, 339, 339, 0, 340, 
	507, 340, 340, 340, 0, 341, 507, 341, 
	341, 341, 0, 342, 507, 342, 342, 342, 
	0, 343, 507, 343, 343, 343, 0, 344, 
	507, 344, 344, 344, 0, 345, 507, 345, 
	345, 345, 0, 346, 507, 346, 346, 346, 
	0, 347, 507, 347, 347, 347, 0, 348, 
	507, 348, 348, 348, 0, 349, 507, 349, 
	349, 349, 0, 350, 507, 350, 350, 350, 
	0, 351, 507, 351, 351, 351, 0, 352, 
	507, 352, 352, 352, 0, 353, 507, 353, 
	353, 353, 0, 354, 507, 354, 354, 354, 
	0, 355, 507, 355, 355, 355, 0, 356, 
	507, 356, 356, 356, 0, 357, 507, 357, 
	357, 357, 0, 358, 507, 358, 358, 358, 
	0, 359, 507, 359, 359, 359, 0, 360, 
	507, 360, 360, 360, 0, 361, 507, 361, 
	361, 361, 0, 362, 507, 362, 362, 362, 
	0, 363, 507, 363, 363, 363, 0, 364, 
	507, 364, 364, 364, 0, 365, 507, 365, 
	365, 365, 0, 366, 507, 366, 366, 366, 
	0, 367, 507, 367, 367, 367, 0, 368, 
	507, 368, 368, 368, 0, 369, 507, 369, 
	369, 369, 0, 370, 507, 370, 370, 370, 
	0, 371, 507, 371, 371, 371, 0, 372, 
	507, 372, 372, 372, 0, 373, 507, 373, 
	373, 373, 0, 374, 507, 374, 374, 374, 
	0, 375, 507, 375, 375, 375, 0, 376, 
	507, 376, 376, 376, 0, 377, 507, 377, 
	377, 377, 0, 378, 507, 378, 378, 378, 
	0, 379, 507, 379, 379, 379, 0, 380, 
	507, 380, 380, 380, 0, 381, 507, 381, 
	381, 381, 0, 382, 507, 382, 382, 382, 
	0, 383, 507, 383, 383, 383, 0, 384, 
	507, 384, 384, 384, 0, 385, 507, 385, 
	385, 385, 0, 386, 507, 386, 386, 386, 
	0, 387, 507, 387, 387, 387, 0, 388, 
	507, 388, 388, 388, 0, 389, 507, 389, 
	389, 389, 0, 390, 507, 390, 390, 390, 
	0, 391, 507, 391, 391, 391, 0, 392, 
	507, 392, 392, 392, 0, 393, 507, 393, 
	393, 393, 0, 394, 507, 394, 394, 394, 
	0, 395, 507, 395, 395, 395, 0, 396, 
	507, 396, 396, 396, 0, 397, 507, 397, 
	397, 397, 0, 398, 507, 398, 398, 398, 
	0, 399, 507, 399, 399, 399, 0, 400, 
	507, 400, 400, 400, 0, 401, 507, 401, 
	401, 401, 0, 402, 507, 402, 402, 402, 
	0, 403, 507, 403, 403, 403, 0, 404, 
	507, 404, 404, 404, 0, 405, 507, 405, 
	405, 405, 0, 406, 507, 406, 406, 406, 
	0, 407, 507, 407, 407, 407, 0, 408, 
	507, 408, 408, 408, 0, 409, 507, 409, 
	409, 409, 0, 410, 507, 410, 410, 410, 
	0, 411, 507, 411, 411, 411, 0, 412, 
	507, 412, 412, 412, 0, 413, 507, 413, 
	413, 413, 0, 414, 507, 414, 414, 414, 
	0, 415, 507, 415, 415, 415, 0, 416, 
	507, 416, 416, 416, 0, 417, 507, 417, 
	417, 417, 0, 418, 507, 418, 418, 418, 
	0, 419, 507, 419, 419, 419, 0, 420, 
	507, 420, 420, 420, 0, 421, 507, 421, 
	421, 421, 0, 422, 507, 422, 422, 422, 
	0, 423, 507, 423, 423, 423, 0, 424, 
	507, 424, 424, 424, 0, 425, 507, 425, 
	425, 425, 0, 426, 507, 426, 426, 426, 
	0, 427, 507, 427, 427, 427, 0, 428, 
	507, 428, 428, 428, 0, 429, 507, 429, 
	429, 429, 0, 430, 507, 430, 430, 430, 
	0, 431, 507, 431, 431, 431, 0, 432, 
	507, 432, 432, 432, 0, 433, 507, 433, 
	433, 433, 0, 434, 507, 434, 434, 434, 
	0, 435, 507, 435, 435, 435, 0, 436, 
	507, 436, 436, 436, 0, 437, 507, 437, 
	437, 437, 0, 438, 507, 438, 438, 438, 
	0, 439, 507, 439, 439, 439, 0, 440, 
	507, 440, 440, 440, 0, 441, 507, 441, 
	441, 441, 0, 442, 507, 442, 442, 442, 
	0, 443, 507, 443, 443, 443, 0, 444, 
	507, 444, 444, 444, 0, 445, 507, 445, 
	445, 445, 0, 446, 507, 446, 446, 446, 
	0, 447, 507, 447, 447, 447, 0, 448, 
	507, 448, 448, 448, 0, 449, 507, 449, 
	449, 449, 0, 450, 507, 450, 450, 450, 
	0, 451, 507, 451, 451, 451, 0, 452, 
	507, 452, 452, 452, 0, 453, 507, 453, 
	453, 453, 0, 454, 507, 454, 454, 454, 
	0, 455, 507, 455, 455, 455, 0, 456, 
	507, 456, 456, 456, 0, 457, 507, 457, 
	457, 457, 0, 458, 507, 458, 458, 458, 
	0, 459, 507, 459, 459, 459, 0, 460, 
	507, 460, 460, 460, 0, 461, 507, 461, 
	461, 461, 0, 462, 507, 462, 462, 462, 
	0, 463, 507, 463, 463, 463, 0, 464, 
	507, 464, 464, 464, 0, 465, 507, 465, 
	465, 465, 0, 466, 507, 466, 466, 466, 
	0, 467, 507, 467, 467, 467, 0, 468, 
	507, 468, 468, 468, 0, 469, 507, 469, 
	469, 469, 0, 470, 507, 470, 470, 470, 
	0, 471, 507, 471, 471, 471, 0, 472, 
	507, 472, 472, 472, 0, 473, 507, 473, 
	473, 473, 0, 474, 507, 474, 474, 474, 
	0, 475, 507, 475, 475, 475, 0, 476, 
	507, 476, 476, 476, 0, 477, 507, 477, 
	477, 477, 0, 478, 507, 478, 478, 478, 
	0, 479, 507, 479, 479, 479, 0, 480, 
	507, 480, 480, 480, 0, 481, 507, 481, 
	481, 481, 0, 482, 507, 482, 482, 482, 
	0, 483, 507, 483, 483, 483, 0, 484, 
	507, 484, 484, 484, 0, 485, 507, 485, 
	485, 485, 0, 486, 507, 486, 486, 486, 
	0, 487, 507, 487, 487, 487, 0, 488, 
	507, 488, 488, 488, 0, 489, 507, 489, 
	489, 489, 0, 490, 507, 490, 490, 490, 
	0, 491, 507, 491, 491, 491, 0, 492, 
	507, 492, 492, 492, 0, 493, 507, 493, 
	493, 493, 0, 494, 507, 494, 494, 494, 
	0, 495, 507, 495, 495, 495, 0, 496, 
	507, 496, 496, 496, 0, 497, 507, 497, 
	497, 497, 0, 498, 507, 498, 498, 498, 
	0, 499, 507, 499, 499, 499, 0, 500, 
	507, 500, 500, 500, 0, 501, 507, 501, 
	501, 501, 0, 502, 507, 502, 502, 502, 
	0, 503, 507, 503, 503, 503, 0, 504, 
	507, 504, 504, 504, 0, 505, 507, 505, 
	505, 505, 0, 506, 507, 506, 506, 506, 
	0, 507, 0, 508, 0, 509, 0, 510, 
	0, 511, 0, 512, 0, 513, 0, 514, 
	0, 515, 0, 516, 0, 517, 0, 518, 
	0, 519, 0, 520, 0, 521, 0, 522, 
	0, 523, 0, 524, 0, 525, 0, 526, 
	0, 527, 0, 528, 0, 529, 0, 530, 
	0, 531, 0, 532, 0, 532, 533, 532, 
	0, 179, 0, 0, 0
]

class << self
	attr_accessor :_parser_trans_actions
	private :_parser_trans_actions, :_parser_trans_actions=
end
self._parser_trans_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 5, 5, 1, 1, 0, 
	0, 0, 0, 0, 1, 0, 7, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 3, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 1, 9, 1, 1, 1, 0, 1, 
	9, 1, 1, 1, 0, 1, 9, 1, 
	1, 1, 0, 1, 9, 1, 1, 1, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :parser_start
end
self.parser_start = 1;
class << self
	attr_accessor :parser_first_final
end
self.parser_first_final = 534;
class << self
	attr_accessor :parser_error
end
self.parser_error = 0;

class << self
	attr_accessor :parser_en_main
end
self.parser_en_main = 1;


# line 145 "lib/castanet/response.rl"
  end
end
